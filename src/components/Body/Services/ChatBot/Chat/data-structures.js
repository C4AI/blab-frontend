/**
 * Represents message types.
 *
 * @property {String} TEXT text message (has only text)
 * @property {String} AUDIO message with audio (with optional caption)
 * @property {String} VIDEO message with video (with optional caption)
 * @property {String} IMAGE message with image (with optional caption)
 * @property {String} VOICE voice message (only audio)
 * @property {String} ATTACHMENT attachment message
 *  (file + optional caption)
 * @property {String} SYSTEM system message
 *  (has `event`, may have `additional_metadata`)
 *
 * @category Services
 * @subcategory ChatBot
 */
export const MessageTypes = Object.freeze({
  TEXT: "T",
  AUDIO: "a",
  VIDEO: "v",
  IMAGE: "i",
  VOICE: "V",
  ATTACHMENT: "A",
  SYSTEM: "S",
});

/**
 * Represent message direction and status.
 *
 * @property {String} SENDING pending message
 * @property {String} SENT sent message (confirmed by server)
 * @property {String} RECEIVED received message
 * @property {String} SYSTEM system message
 *
 * @category Services
 * @subcategory ChatBot
 */
export const MessageConditions = Object.freeze({
  SENDING: "sending",
  SENT: "sent",
  RECEIVED: "received",
  SYSTEM: "system",
});

/**
 * Represents a message.
 *
 * @category Services
 * @subcategory ChatBot
 */
export class Message {
  /**
   * Create a message.
   *
   * @param {string} type message type (see {@link MessageTypes})
   * @param {string} condition message condition (see {@link MessageConditions})
   * @param {Date} time when the message was sent
   * @param {string} localId message id generated by the sender
   * @param {string} id message id
   * @param {string} text message text (for text messages),
   *    transcription (for voice messages)
   *    or caption (for attachment and media messages)
   * @param {string} senderId sender's id
   * @param {string} fileUrl download URL
   *    (for voice, media and attachment messages)
   * @param {number} fileSize file size in bytes
   * @param {string} fileName file name
   * @param {string} quotedMessageId id of the quoted message
   * @param {string} event event type (for system messages)
   * @param {Object} additionalMetadata additional metadata
   *    (for system messages)
   * @param {File} rawFile contents of the file being attached
   *    (only for messages that have not been sent yet;
   *     messages returned from the server should use `fileUrl`)
   */
  constructor(
    type,
    condition,
    time,
    localId,
    id,
    text,
    senderId,
    fileUrl,
    fileSize,
    fileName,
    quotedMessageId,
    event,
    additionalMetadata,
    rawFile
  ) {
    this.type = type;
    this.condition = condition;
    this.time = time instanceof Date ? time : new Date(time);
    this.localId = localId;
    this.id = id;
    this.text = text;
    this.senderId = senderId;
    this.fileUrl = fileUrl;
    this.fileSize = fileSize;
    this.fileName = fileName;
    this.quotedMessageId = quotedMessageId;
    this.event = event;
    this.additionalMetadata = additionalMetadata;
    this.rawFile = rawFile;
  }

  /**
   * Convert the message into a plain JS object containing only the data
   * that should be sent to the server.
   *
   * @returns a representation that is ready to be sent to the server
   *          (either JSON or FormData)
   */
  asObjectToSend() {
    const m = {
      type: this.type,
      text: this.text,
      local_id: this.localId,
    };
    if (this.quotedMessageId) m["quoted_message_id"] = this.quotedMessageId;
    if (this.type == MessageTypes.TEXT || this.rawFile === undefined) return m;
    const fd = new FormData();
    Object.keys(m).forEach((key) => fd.append(key, m[key]));
    fd.append("file", this.rawFile);
    return fd;
  }

  /**
   * Build a {@link Message} instance from data returned by the server
   *
   * @param {Object} m message data (as received from the server)
   * @param {string} m.type message type (see {@link MessageTypes})
   * @param {string} m.time when the message was sent (ISO-8601 format)
   * @param {string} m.local_id message id generated by the sender
   * @param {string} m.id message id
   * @param {string} m.text message text (for text messages),
   *    transcription (for voice messages)
   *    or caption (for attachment and media messages)
   * @param {Object} m.sender who sent the message
   * @param {string} m.sender_id sender's id
   * @param {string} m.file_url file download URL
   *    (for voice, media and attachment messages)
   * @param {string} m.file_size file size in bytes
   *    (for voice, media and attachment messages)
   * @param {string} m.file_name file name
   *    (for voice, media and attachment messages)
   * @param {string} m.quoted_message_id if of the quoted message
   * @param {string} m.event event type (for system messages)
   * @param {Object} m.additional_metadata additional metadata
   *    (for system messages)
   * @param {string} myParticipantId id of the current participant
   *    (used to obtain origin, see {@link MessageConditions})
   * @returns an instance of {@link Message} using the provided data
   */
  static fromServerData(m, myParticipantId) {
    return new Message(
      m.type,
      m.type === MessageTypes.SYSTEM
        ? MessageConditions.SYSTEM
        : myParticipantId && m.sender_id === myParticipantId
        ? MessageConditions.SENT
        : MessageConditions.RECEIVED,
      m.time,
      m.local_id,
      m.id,
      m.text,
      m.sender_id,
      m.file_url,
      m.file_size,
      m.file_name,
      m.quoted_message_id,
      m.event,
      m.additional_metadata,
      undefined
    );
  }
}
